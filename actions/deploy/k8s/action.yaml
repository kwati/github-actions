name: Kubernetes Deployment
description: Deploy Helm chart to Kubernetes
inputs:
  VAULT_SERVER:
    description: Build Image Tag
    required: true
  VAULT_TOKEN: 
    description: Vault Token
    required: true
  VAULT_SECRET_PATH:
    description: Secret Path
    required: true
  VAULT_SECRET_COMMON_PATH:
    description: K8s common Secret Path
    required: true
  VAULT_SECRETS_CICD_PATH:
    description: Vault Secrets Path
    required: true
  IMAGE_TAG:
    description: Image Tag
    required: true
  REPLICAS:
    description: Default Replica
    required: true
    default: '1'
  DATACENTER:
    description: Datacenter
    required: true
  LOCAL_SETTINGS:
    description: Enable it if local settings is required to download
  EXTRA_HELM_ARGS_1:
    description: Extra Helm Arguments
  EXTRA_HELM_ARGS_2:
    description: Extra Helm Arguments
  EXTRA_HELM_ARGS_3:
    description: Extra Helm Arguments
runs:
  using: composite
  steps:
  - name: Import Secrets From Vault
    uses: hashicorp/vault-action@v2
    with:
      url: https://${{ inputs.VAULT_SERVER }}/
      token: ${{ inputs.VAULT_TOKEN }}
      tlsSkipVerify: true
      secrets: |
        ${{ inputs.VAULT_SECRET_COMMON_PATH }} ENVIRONMENT | ENVIRONMENT;
        ${{ inputs.VAULT_SECRET_COMMON_PATH }} ECR_REPOSITORY | ECR_REPOSITORY;
        ${{ inputs.VAULT_SECRET_COMMON_PATH }} PROJECT_NAME | PROJECT_NAME;
        ${{ inputs.VAULT_SECRET_COMMON_PATH }} VERSION | VERSION;
        ${{ inputs.VAULT_SECRET_COMMON_PATH }} GITLAB_PROJECT_NUMBER | GITLAB_PROJECT_NUMBER;
        ${{ inputs.VAULT_SECRET_COMMON_PATH }} LOCAL_SETTINGS_NAME | LOCAL_SETTINGS_NAME;
        ${{ inputs.VAULT_SECRET_COMMON_PATH }} NAMESPACE | NAMESPACE;
        ${{ inputs.VAULT_SECRET_PATH }} MASTER_IP | MASTER_IP;
        ${{ inputs.VAULT_SECRET_PATH }} NODE_PORT | NODE_PORT;
        ${{ inputs.VAULT_SECRETS_CICD_PATH }} AWS_ACCESS_KEY_ID_ECR | AWS_ACCESS_KEY_ID_ECR;
        ${{ inputs.VAULT_SECRETS_CICD_PATH }} AWS_SECRET_ACCESS_KEY_ECR | AWS_SECRET_ACCESS_KEY_ECR;
        ${{ inputs.VAULT_SECRETS_CICD_PATH }} SSH_KEY | SSH_KEY;
        ${{ inputs.VAULT_SECRETS_CICD_PATH }} REGISTRY | REGISTRY;
        ${{ inputs.VAULT_SECRETS_CICD_PATH }} LOGSTASH_IP | LOGSTASH_IP;
        ${{ inputs.VAULT_SECRETS_CICD_PATH }} GITLAB_TOKEN | GITLAB_TOKEN;
        ${{ inputs.VAULT_SECRETS_CICD_PATH }} GITLAB_SERVER | GITLAB_SERVER;
        ${{ inputs.VAULT_SECRETS_CICD_PATH }} KCR_USER | KCR_USER;
        ${{ inputs.VAULT_SECRETS_CICD_PATH }} KCR_PASSWORD | KCR_PASSWORD;
        ${{ inputs.VAULT_SECRETS_CICD_PATH }} IMAGE_REPOSITORY | IMAGE_REPOSITORY;
  
  - name: Import Secrets From Vault for EKS
    if: ${{ env.K8S_CLUSTER_INFRA == 'EKS' }}
    uses: hashicorp/vault-action@v2
    with:
      url: https://${{ inputs.VAULT_SERVER }}/
      token: ${{ inputs.VAULT_TOKEN }}
      tlsSkipVerify: true
      secrets: |
        ${{ inputs.VAULT_SECRETS_CICD_PATH }} EKS_CLUSTER_NAME | EKS_CLUSTER_NAME;
        ${{ inputs.VAULT_SECRETS_CICD_PATH }} AWS_REGION_EKS | AWS_REGION_EKS;
        ${{ inputs.VAULT_SECRETS_CICD_PATH }} AWS_ACCESS_KEY_ID_EKS | AWS_ACCESS_KEY_ID_EKS;
        ${{ inputs.VAULT_SECRETS_CICD_PATH }} AWS_SECRET_ACCESS_KEY_EKS | AWS_SECRET_ACCESS_KEY_EKS;
        ${{ inputs.VAULT_SECRETS_CICD_PATH }} K8S_CLUSTER_INFRA | K8S_CLUSTER_INFRA;

  - name: Install SSH Key
    if: ${{ env.K8S_CLUSTER_INFRA != 'EKS' }}
    uses: shimataro/ssh-key-action@v2
    with:
      key: ${{ env.SSH_KEY }}
      known_hosts: 'SSH KEY'
      if_key_exists: replace
  
  - name: Add Known Hosts
    if: ${{ env.K8S_CLUSTER_INFRA != 'EKS' }}
    run: |
      ssh-keyscan -H ${{ env.MASTER_IP }} >> ~/.ssh/known_hosts
    shell: bash

  - name: Extract Kubeconfig file
    if: ${{ env.K8S_CLUSTER_INFRA != 'EKS' }}
    run: |
      scp root@${{ env.MASTER_IP }}:/etc/rancher/rke2/rke2.yaml kubeconfig.yaml
      sed -i "s|https://127.0.0.1:6443|https://${{ env.MASTER_IP }}:6443|g" kubeconfig.yaml
    shell: bash
  
  - name: 'Configure AWS creds'
    if: ${{ env.K8S_CLUSTER_INFRA == 'EKS' }}
    uses: aws-actions/configure-aws-credentials@v1
    with:
      aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID_EKS }}
      aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY_EKS }}
      aws-region: ${{env.AWS_REGION_EKS}}

  - name: Extract Kubeconfig file
    if: ${{ env.K8S_CLUSTER_INFRA == 'EKS' }}
    run: |
      rm -rf /root/.kube/config.yaml
      aws eks update-kubeconfig --region ${{ env.AWS_REGION_EKS }} --name ${{ env.EKS_CLUSTER_NAME }}
      cp /root/.kube/config.yaml ${{ github.workspace }}/kubeconfig.yaml
    shell: bash

  - name: Check Cluster Health
    run: |      
      echo "Check Cluster Status"
      kubectl get --raw='/readyz?verbose'
      kubectl get --raw='/readyz?verbose' | grep "readyz check passed"
      if test \$? -eq 0; then
          echo "Kubernetes cluster is Healthy...Continuing the pipeline"
      else
          echo "Kubernetes cluster is Not Healthy . Exiting Pipeline..."
          exit 1
      fi
    shell: bash

  - name: Create Namespace
    run: |
      export KUBECONFIG=/root/.kube/config.yaml
      if ! kubectl get namespace '${{ env.NAMESPACE }}' &> /dev/null; then
        echo "Creating namespace ${{ env.NAMESPACE }}"
        kubectl create namespace "${{ env.NAMESPACE }}"
      else
        echo "Namespace ${{ env.NAMESPACE }} already exists."
      fi
    shell: bash
  
  - name: Create configmap and secrets
    run: |
      ${{ github.action_path }}/scripts/config.sh
    shell: bash
    env:
      VAULT_TOKEN: ${{ inputs.VAULT_TOKEN }}
      VAULT_SERVER: ${{ inputs.VAULT_SERVER }}
      VAULT_SECRET_PATH: ${{ inputs.VAULT_SECRET_PATH }}
      VAULT_SECRET_COMMON_PATH: ${{ inputs.VAULT_SECRET_COMMON_PATH }}
      LOCAL_SETTINGS: ${{ inputs.LOCAL_SETTINGS }}
      ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
  
  - name: Create KCR secret
    if: ${{ env.K8S_CLUSTER_INFRA != 'EKS' }}
    run: |
      if kubectl get secret kcr-secret --namespace=${{ env.NAMESPACE }} &> /dev/null; then
        echo "Creating kcr-secrets from variables..."
        kubectl delete secret kcr-secret --namespace=${{ env.NAMESPACE }}
        kubectl create secret docker-registry kcr-secret --namespace=${{ env.NAMESPACE }} --docker-server=${{ env.IMAGE_REPOSITORY }} --docker-username=${{ env.KCR_USER }} --docker-password=${{ env.KCR_PASSWORD }}
      else
        echo "Creating kcr-secrets from variables..."
        kubectl create secret docker-registry kcr-secret --namespace=${{ env.NAMESPACE }} --docker-server=${{ env.IMAGE_REPOSITORY }} --docker-username=${{ env.KCR_USER }} --docker-password=${{ env.KCR_PASSWORD }}
      fi
    shell: bash

  - name: Create KCR secret
    if: ${{ env.K8S_CLUSTER_INFRA == 'EKS' }}
    run: |
      if kubectl get secret kcr-secret --namespace=${{ env.NAMESPACE }} &> /dev/null; then
        echo "Creating kcr-secrets from variables..."
        kubectl delete secret kcr-secret --namespace=${{ env.NAMESPACE }}
        kubectl create secret docker-registry kcr-secret --namespace=${{ env.NAMESPACE }} --docker-server=${{ env.IMAGE_REPOSITORY }} --docker-username=${{ env.KCR_USER }} --docker-password=${{ env.KCR_PASSWORD }}
      else
        echo "Creating kcr-secrets from variables..."
        kubectl create secret docker-registry kcr-secret --namespace=${{ env.NAMESPACE }} --docker-server=${{ env.IMAGE_REPOSITORY }} --docker-username=${{ env.KCR_USER }} --docker-password=${{ env.KCR_PASSWORD }}
      fi
    shell: bash

  - name: Configure AWS creds
    if: ${{ env.K8S_CLUSTER_INFRA == 'EKS' }}
    uses: aws-actions/configure-aws-credentials@v1
    with:
      aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID_ECR }}
      aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY_ECR }}
      aws-region: ${{env.AWS_REGION_EKS}}

  - name: Create ECR Regsitry secret
    if: ${{ env.K8S_CLUSTER_INFRA == 'EKS' }}
    run: |
      AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
      kubectl create secret docker-registry kcr-secret \
        --docker-server=${AWS_ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION_EKS }}.amazonaws.com \
        --docker-username=AWS \
        --docker-password=$(aws ecr get-login-password --region ${{ env.AWS_REGION_EKS }}) \
        --namespace=${{ env.NAMESPACE }}
    shell: bash
  
  - name: Login to ECR
    uses: docker/login-action@v1
    with:
      registry: ${{ env.REGISTRY }}
      username: ${{ env.AWS_ACCESS_KEY_ID_ECR }}
      password: ${{ env.AWS_SECRET_ACCESS_KEY_ECR }}
 
  - name: Deploy to K8s Cluster
    run: |
      export KUBECONFIG=kubeconfig.yaml
      helm upgrade ${{ env.PROJECT_NAME }} --install oci://${{ env.REGISTRY }}/${{ env.ECR_REPOSITORY }} --version ${{ env.VERSION }} --set replicas=${{ inputs.REPLICAS }} \
      --namespace=${{ env.NAMESPACE }} --set nameOverride=${{ env.PROJECT_NAME }} --set image.repository=${{ env.IMAGE_REPOSITORY }}/${{ github.repository }}-${{ env.ENVIRONMENT }}:${{ inputs.IMAGE_TAG }} \
      --set service.nodePort=${{ env.NODE_PORT }} --set dc=${{ inputs.DATACENTER }} --set sidecar.filebeat.logstashIp=${{ env.LOGSTASH_IP }} --set sidecar.filebeat.logstashPort=5045 \
      --set env.DATACENTER=${{ inputs.DATACENTER }} ${{ inputs.EXTRA_HELM_ARGS_1 }} ${{ inputs.EXTRA_HELM_ARGS_2 }} ${{ inputs.EXTRA_HELM_ARGS_3 }}
    shell: bash
